diff --git a/packages/Python/lldbsuite/test/functionalities/process_attach/attach_denied/TestAttachDenied.py b/packages/Python/lldbsuite/test/functionalities/process_attach/attach_denied/TestAttachDenied.py
index 5793414..4318989 100644
--- a/packages/Python/lldbsuite/test/functionalities/process_attach/attach_denied/TestAttachDenied.py
+++ b/packages/Python/lldbsuite/test/functionalities/process_attach/attach_denied/TestAttachDenied.py
@@ -34,7 +34,7 @@ class AttachDeniedTestCase(TestBase):
         # Use a file as a synchronization point between test and inferior.
         pid_file_path = lldbutil.append_to_process_working_directory(
                 "pid_file_%d" % (int(time.time())))
-        self.addTearDownHook(lambda: self.run_platform_command("rm %s" % (pid_file_path)))
+        self.addTearDownHook(lambda: self.run_platform_command("rm -f %s" % (pid_file_path)))
 
         # Spawn a new process
         popen = self.spawnSubprocess(exe, [pid_file_path])
@@ -45,8 +45,6 @@ class AttachDeniedTestCase(TestBase):
             err, retcode, msg = self.run_platform_command("ls %s" % pid_file_path)
             if err.Success() and retcode == 0:
                 break
-            else:
-                print(msg)
             if i < max_attempts:
                 # Exponential backoff!
                 time.sleep(pow(2, i) * 0.25)
diff --git a/packages/Python/lldbsuite/test/functionalities/process_group/TestChangeProcessGroup.py b/packages/Python/lldbsuite/test/functionalities/process_group/TestChangeProcessGroup.py
index e03e735..ae6a42b 100644
--- a/packages/Python/lldbsuite/test/functionalities/process_group/TestChangeProcessGroup.py
+++ b/packages/Python/lldbsuite/test/functionalities/process_group/TestChangeProcessGroup.py
@@ -31,7 +31,7 @@ class ChangeProcessGroupTestCase(TestBase):
         # Use a file as a synchronization point between test and inferior.
         pid_file_path = lldbutil.append_to_process_working_directory(
                 "pid_file_%d" % (int(time.time())))
-        self.addTearDownHook(lambda: self.run_platform_command("rm %s" % (pid_file_path)))
+        self.addTearDownHook(lambda: self.run_platform_command("rm -f %s" % (pid_file_path)))
 
         popen = self.spawnSubprocess(exe, [pid_file_path])
         self.addTearDownHook(self.cleanupSubprocesses)
@@ -41,8 +41,6 @@ class ChangeProcessGroupTestCase(TestBase):
             err, retcode, msg = self.run_platform_command("ls %s" % pid_file_path)
             if err.Success() and retcode == 0:
                 break
-            else:
-                print(msg)
             if i < max_attempts:
                 # Exponential backoff!
                 time.sleep(pow(2, i) * 0.25)
diff --git a/packages/Python/lldbsuite/test/lldbtest.py b/packages/Python/lldbsuite/test/lldbtest.py
index de8f57f..a666a15 100644
--- a/packages/Python/lldbsuite/test/lldbtest.py
+++ b/packages/Python/lldbsuite/test/lldbtest.py
@@ -2399,7 +2374,7 @@ class TestBase(Base):
                     # TODO: Make it working on Windows when we need it for remote debugging support
                     # TODO: Replace the heuristic to remove the files with a logic what collects the
                     # list of files we have to remove during test runs.
-                    shell_cmd = lldb.SBPlatformShellCommand("rm %s/*" % remote_test_dir)
+                    shell_cmd = lldb.SBPlatformShellCommand("rm -fr %s/*" % remote_test_dir)
                     lldb.remote_platform.Run(shell_cmd)
                 self.addTearDownHook(clean_working_directory)
             else:
